import Head from "next/head";
import { useRouter } from "next/router";
import { useCallback, useState, useEffect } from "react";
import { useSession, signIn, signOut } from "next-auth/react";

export type SpotifyToken = {
  access_token: string;
  token_type: string;
  expires_in: number;
  refresh_token: string;
  scope: string;
};

export type SpotifyUserProfile = {
  country: string;
  display_name: string;
  email: string;
  explicit_content: {
    filter_enabled: boolean;
    filter_locked: boolean;
  };
  external_urls: {
    spotify: string;
  };
  followers: {
    href: string;
    total: number;
  };
  href: string;
  id: string;
  images: Array<{
    url: string;
    height: number;
    width: number;
  }>;
  product: string;
  type: string;
  uri: string;
};

export default function Home() {
  // const hello = api.post.hello.useQuery({ text: "from tRPC" });
  const { data: session } = useSession();

  // const [message, setMessage] = useState("");
  const [userProfile, setUserProfile] = useState<SpotifyUserProfile | null>(
    null,
  );

  // useEffect(() => {
  //   fetch("/api/openai")
  //     .then((res) => res.json())
  //     .then((data: { message: { content: string; role: string } }) => {
  //       console.log(data);
  //       setMessage(data.message.content);
  //     })
  //     .catch((err) => console.log(err));
  // }, []);

  // Add useEffect to fetch profile when session becomes available
  useEffect(() => {
    if (session?.accessToken) {
      getProfile();
    }
  }, [session]);

  const getProfile = useCallback(async () => {
    try {
      const response = await fetch("https://api.spotify.com/v1/me", {
        headers: {
          Authorization: "Bearer " + session?.accessToken,
        },
      });

      if (!response.ok) {
        throw new Error("Failed to fetch profile");
      }

      const data: SpotifyUserProfile = await response.json();
      setUserProfile(data);
    } catch (error) {
      console.error("Error fetching profile:", error);
    }
  }, [session?.accessToken]);

  const renderButtons = useCallback(() => {
    if (!session) {
      return (
        <button onClick={() => signIn("spotify")}>Sign in with Spotify</button>
      );
    }
    return (
      <>
        {userProfile && <pre>{JSON.stringify(userProfile, null, 2)}</pre>}
        <button onClick={() => signOut()}>Sign out</button>
      </>
    );
  }, [session, userProfile]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <p className="text-2xl text-white">
            {/* {hello.data ? hello.data.greeting : "Loading tRPC query..."} */}
            {/* {`From GPT: ${message}`} */}
          </p>
          {/* TODO(steevejoseph): simplify */}
          Issue URL: https://github.com/lonesume/shmood/issues/7
          <div className="text-white">{renderButtons()}</div>
        </div>
      </main>
    </>
  );
}
